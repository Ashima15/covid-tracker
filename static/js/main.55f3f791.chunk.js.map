{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Cards/Cards.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","App.module.css","images/image.png","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","lastUpdate","deaths","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Cards","props","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Chart","useState","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","CountryPicker","handleCountryChange","setCountries","fetchCountriesAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","App","state","componentDidMount","fetchedData","setState","this","image","src","coronaImage","alt","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55f3f791.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    try {\n\n        let changeableUrl = url;\n\n        if(country) {\n            changeableUrl += `/countries/${country}`;\n        }\n\n        const { data: { confirmed, recovered, lastUpdate, deaths } } = await axios.get(changeableUrl);\n\n        return { confirmed, recovered, lastUpdate, deaths };\n    } catch (err) {\n        console.log(err)\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }))\n\n        return modifiedData;\n        // return { confirmed, recovered, lastUpdate, deaths };\n    } catch (err) {\n        console.log(err)\n\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`);\n\n        const modifiedData = countries.map((country) => country.name)\n\n        return modifiedData;\n    } catch (err) {\n        console.log(err)\n\n    }\n}","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = (props) => {\n\n    const { confirmed, recovered, deaths, lastUpdate } = props.data;\n\n    if (!confirmed) {\n        return 'Loading...'\n    }\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Infected\n                        </Typography>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <CountUp start={0} end={confirmed.value} duration={2.75} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">\n                            Number of active cases of COVID-19.\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                \n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Recovered\n                        </Typography>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <CountUp start={0} end={recovered.value} duration={2.75} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">\n                            Number of recoveries from COVID-19.\n                        </Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Deaths\n                        </Typography>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <CountUp start={0} end={deaths.value} duration={2.75} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">\n                            Number of deaths caused by COVID-19.\n                        </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default Cards;","import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState({});\n\n    useEffect(() => {\n        const fetchMyAPI = async () => {\n            const initialDailyData = await fetchDailyData();\n\n            setDailyData(initialDailyData);\n        };\n\n        fetchMyAPI();\n    }, []);\n\n    const barChart = (\n        confirmed ? (\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [\n                        {\n                            label: 'People',\n                            backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                            data: [confirmed.value, recovered.value, deaths.value],\n                        },\n                    ],\n                }}\n                options={{\n                    legend: { display: false },\n                    title: { display: true, text: `Current state in ${country}` },\n                }}\n            />\n        ) : null\n    );\n\n    const lineChart = (\n        dailyData[0] ? (\n            <Line\n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: [{\n                        data: dailyData.map((data) => data.confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true,\n                    }, {\n                        data: dailyData.map((data) => data.deaths),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n            />\n        ) : null\n    );\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    );\n};\n\nexport default Chart;","import React, { useState, useEffect } from 'react';\n\nimport { FormControl, NativeSelect } from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\nimport { fetchCountries } from '../../api';\n\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n    const [countries, setCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchCountriesAPI = async () => {\n            setCountries(await fetchCountries());\n        }\n        fetchCountriesAPI();\n    }, [setCountries])\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {\n                    countries.map((country) => (\n                        <option key={country} name={country}>{country}</option>\n                    ))\n                }\n            </NativeSelect>\n        </FormControl>\n    );\n}\n\nexport default CountryPicker;","import React, { Component } from 'react';\n\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport coronaImage from './images/image.png';\n\nimport { Cards, Chart, CountryPicker } from './components';\n\nclass App extends Component {\n\n\tstate = {\n\t\tdata: {},\n\t\tcountry: ''\n\t}\n\n\tcomponentDidMount = async () => {\n\t\tconst fetchedData = await fetchData();\n\n\t\tthis.setState({ data: fetchedData })\n\t}\n\n\thandleCountryChange = async (country) => {\n\n\t\tconst fetchedData = await fetchData(country);\n\n\t\tthis.setState({\n\t\t\tdata: fetchedData,\n\t\t\tcountry\n\t\t})\n\t}\n\n\trender() {\n\n\t\tconst { data, country } = this.state;\n\n\t\treturn (\n\t\t\t<div className={styles.container}>\n\t\t\t\t<img className={styles.image} src={coronaImage} alt='COVID-19'/>\n\t\t\t\t<Cards data={data} />\n\t\t\t\t<CountryPicker handleCountryChange={this.handleCountryChange} />\n\t\t\t\t<Chart data={data} country={country} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}